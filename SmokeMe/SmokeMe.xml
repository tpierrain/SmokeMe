<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmokeMe</name>
    </assembly>
    <members>
        <member name="T:SmokeMe.CategoryAttribute">
            <summary>
            Allows to associate a Category for a Smoke Test (i.e.: a <see cref="T:SmokeMe.SmokeTest"/> type).
            </summary>
        </member>
        <member name="T:SmokeMe.IgnoreAttribute">
            <summary>
            Tell SmokeMe lib to ignore a Smoke Test (i.e.: a <see cref="T:SmokeMe.SmokeTest"/> type).
            </summary>
        </member>
        <member name="T:SmokeMe.Constants">
            <summary>
            Constants for the /smoke library
            </summary>
        </member>
        <member name="F:SmokeMe.Constants.GlobaltimeoutinmsecConfigurationKey">
            <summary>
            Gets the name of the configuration key for the smoke test global execution timeout.
            </summary>
        </member>
        <member name="F:SmokeMe.Constants.IsEnabledConfigurationKey">
            <summary>
            Gets the name of the configuration key fo the global enabling of the lib.
            </summary>
        </member>
        <member name="F:SmokeMe.Constants.GlobalTimeoutInMsecDefaultValue">
            <summary>
            Gets the default value for the global timeout in milliseconds if the (<see cref="F:SmokeMe.Constants.GlobaltimeoutinmsecConfigurationKey"/>) configuration key is not used to override it.
            </summary>
        </member>
        <member name="T:SmokeMe.Controllers.SmokeController">
            <summary>
            Executes smoke test declared for this API.
            Smoke tests are a set of short functional tests checking that the minimum viable prerequisites for this API is fine.
            </summary>
        </member>
        <member name="M:SmokeMe.Controllers.SmokeController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider,SmokeMe.IProcessSmokeTests)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.Controllers.SmokeController"/>.
            </summary>
            <param name="configuration">The configuration of the API.</param>
            <param name="serviceProvider">A Service provider to be used to instantiate <see cref="T:SmokeMe.SmokeTest"/> smoke tests.</param>
            <param name="smokeTestProcessor">(optional) A smoke test provider (used for unit testing purpose).</param>
        </member>
        <member name="M:SmokeMe.Controllers.SmokeController.ExecuteSmokeTests(System.String[])">
            <summary>
            Execute all registered Smoke Tests for this API.
            </summary>
            <returns>The <see cref="T:SmokeMe.SmokeTestsSessionReport"/> of the Smoke tests execution.</returns>
        </member>
        <member name="T:SmokeMe.Error">
            <summary>
            Error during a <see cref="T:SmokeMe.SmokeTest"/> excecution.
            </summary>
        </member>
        <member name="M:SmokeMe.Error.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates an <see cref="T:SmokeMe.Error"/>.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="exception">An exception that has been catched during the <see cref="T:SmokeMe.SmokeTest"/> execution.</param>
        </member>
        <member name="P:SmokeMe.Error.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:SmokeMe.Error.Exception">
            <summary>
            The exception that has been catched during the <see cref="T:SmokeMe.SmokeTest"/> execution.
            </summary>
        </member>
        <member name="T:SmokeMe.Helpers.ConfigurationExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.
            </summary>
        </member>
        <member name="M:SmokeMe.Helpers.ConfigurationExtensions.GetSmokeMeGlobalTimeout(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets the Global timeout value used by the SmokeMe library (default value may be overriden through configuration file).
            </summary>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> instance used by the API.</param>
            <returns>The Global timeout value.</returns>
        </member>
        <member name="M:SmokeMe.Helpers.ConfigurationExtensions.IsSmokeTestExecutionEnabled(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Gets an indication whether the smoke tests execution is enabled or not (default <b>true</b> value may be overriden through configuration file).
            </summary>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> instance used by the API.</param>
            <returns><b>true</b> if the smoke test execution is enabled or not, <b>false</b> otherwise.</returns>
        </member>
        <member name="T:SmokeMe.Helpers.ReflectionExtensions">
            <summary>
            Extension methods related to the usage of Reflection.
            </summary>
        </member>
        <member name="M:SmokeMe.Helpers.ReflectionExtensions.IsEnumerable(System.Type)">
            <summary>
            Gets a value indicating whether a given <see cref="T:System.Type"/> is <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns><b>true</b> if the <see cref="T:System.Type"/> is a <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:SmokeMe.Helpers.ReflectionExtensions.GetConstructorsOrderedByNumberOfParametersDesc(System.Type)">
            <summary>
            Gets all the constructors of a <see cref="T:System.Type"/> ordered by their number of parameters desc.
            </summary>
            <param name="type">The considered <see cref="T:System.Type"/>.</param>
            <returns>All the constructors of a <see cref="T:System.Type"/> ordered by their number of parameters desc.</returns>
        </member>
        <member name="T:SmokeMe.Helpers.TimespanExtensions">
            <summary>
            Extension methods for <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:SmokeMe.Helpers.TimespanExtensions.GetHumanReadableVersion(System.TimeSpan)">
            <summary>
            Adapts <see cref="T:System.TimeSpan"/> duration to a human readable string version (with "en-us" culture format).
            </summary>
            <param name="duration">The <see cref="T:System.TimeSpan"/> to be adapted.</param>
            <returns>The human readable string version (with "en-us" culture format) of the <see cref="T:System.TimeSpan"/> provided.</returns>
        </member>
        <member name="T:SmokeMe.Helpers.TypeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:SmokeMe.Helpers.TypeExtensions.HasIgnoredCustomAttribute(System.Type)">
            <summary>
            Indicates whether or not a considered type has the Ignore custom Attribute.
            </summary>
            <param name="consideredType">The type we want to check.</param>
            <returns><b>true</b> if the Type has an [Ignore()] attribute; <b>false</b> otherwise.</returns>
        </member>
        <member name="T:SmokeMe.ICheckSmoke">
            <summary>
            The ICheckSmoke interface is deprecated and MUST be replaced by SmokeTest abstract class. To do so, just replace all reference to ICheckSmoke with SmokeTest and add the 'override' keyword to your existing SmokeTestName, Description properties, but also to the Scenario() method which is now an abstract method.
            </summary>
        </member>
        <member name="M:SmokeMe.ICheckSmoke.WithTheV2MajorBreakingChangeOfSmokeMeYouMustReplaceAllYourPreviousReferenceToICheckSmokeInterfaceWithTheSmokeTestAbstractClass">
            <summary>
            Breaking change: the ICheckSmoke interface is deprecated and MUST be replaced by SmokeTest abstract class. To do so, just replace all reference to ICheckSmoke with SmokeTest and add the 'override' keyword to your existing SmokeTestName, Description properties, but also to the Scenario() method which is now an abstract method.
            </summary>
        </member>
        <member name="T:SmokeMe.IFindSmokeTests">
            <summary>
            Responsible to find smoke tests to be run within an executable.
            </summary>
        </member>
        <member name="M:SmokeMe.IFindSmokeTests.FindAllSmokeTestsToRun(System.String[])">
            <summary>
            Instantiates all the <see cref="T:SmokeMe.SmokeTest"/> instances that have been found in the running code.
            </summary>
            <returns>A collection of <see cref="T:SmokeMe.SmokeTest"/> instances.</returns>
        </member>
        <member name="T:SmokeMe.Infra.ApiRuntimeDescription">
            <summary>
            A few information about an API and its execution runtime.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.ApiRuntimeDescription.InstanceIdentifier">
            <summary>
            Gets the API instance identifier.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.ApiRuntimeDescription.ApiVersion">
            <summary>
            Gets the API version.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.ApiRuntimeDescription.OsName">
            <summary>
            Gets the OS name of this API instance.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.ApiRuntimeDescription.AzureRegionName">
            <summary>
            Gets the region name where this API instance is running (for API running on Azure only).
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.ApiRuntimeDescription.NbOfProcessors">
            <summary>
            Gets the number of Processors this API instance has.
            </summary>
        </member>
        <member name="M:SmokeMe.Infra.ApiRuntimeDescription.#ctor">
            <summary>
            Instantiates an <see cref="T:SmokeMe.Infra.ApiRuntimeDescription"/>.
            </summary>
        </member>
        <member name="T:SmokeMe.Infra.SmokeTestResultWithMetaDataDto">
            <summary>
            Result of a <see cref="T:SmokeMe.SmokeTest"/> execution enhanced with meta data about it and its execution (like the <see cref="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.Duration"/>).
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.SmokeTestName">
            <summary>
            The name of the <see cref="T:SmokeMe.SmokeTest"/> smoke test (as declared by it).
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.SmokeTestDescription">
            <summary>
            The description of what this <see cref="T:SmokeMe.SmokeTest"/> smoke test is about (as declared by it).
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.SmokeTestCategories">
            <summary>
            Gets the list of <see cref="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.SmokeTestCategories"/> attributes related to this Smoke test (i.e.: <see cref="T:SmokeMe.SmokeTest"/>).
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.Outcome">
            <summary>
            Indicates whether the outcome of this <see cref="T:SmokeMe.SmokeTest"/> execution is positive or not.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.Error">
            <summary>
            Gets the <see cref="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.Error"/> associated to this <see cref="T:SmokeMe.SmokeTest"/> execution.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.Duration">
            <summary>
            Gets the human-readable duration of this smoke test execution.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.DurationInMsec">
            <summary>
            Gets the duration in milliseconds of this smoke test execution (useful for scripting).
            </summary>
        </member>
        <member name="M:SmokeMe.Infra.SmokeTestResultWithMetaDataDto.#ctor(System.String,System.String,System.Boolean,SmokeMe.Error,System.Nullable{System.TimeSpan},System.String,SmokeMe.Status,System.String[],System.String)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.Infra.SmokeTestResultWithMetaDataDto"/>.
            </summary>
            <param name="smokeTestName"></param>
            <param name="smokeTestDescription"></param>
            <param name="outcome"></param>
            <param name="error"></param>
            <param name="durationTimespan"></param>
            <param name="duration"></param>
            <param name="status"></param>
            <param name="smokeTestCategories"></param>
            <param name="argSmokeTestCategories"></param>
        </member>
        <member name="T:SmokeMe.Infra.SmokeTestsDisabledReportDto">
            <summary>
            Report for a smoke test execution that could not happened due to configuration settings.
            </summary>
        </member>
        <member name="T:SmokeMe.Infra.SmokeTestSessionResultAdapter">
            <summary>
            Adapter from SmokeMe internal model to SmokeMe external DTOs.
            </summary>
        </member>
        <member name="M:SmokeMe.Infra.SmokeTestSessionResultAdapter.Adapt(SmokeMe.SmokeTestsSessionReport,SmokeMe.Infra.ApiRuntimeDescription,System.String[],Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adapts a <see cref="T:SmokeMe.SmokeTestsSessionReport"/> instance to a <see cref="T:SmokeMe.Infra.SmokeTestsSessionReportDto"/> one.
            </summary>
            <param name="reports">The <see cref="T:SmokeMe.SmokeTestsSessionReport"/> instance to adapt.</param>
            <param name="runtimeDescription">The <see cref="T:SmokeMe.Infra.ApiRuntimeDescription"/> to associate</param>
            <param name="categories"></param>
            <param name="configuration"></param>
            <returns>The <see cref="T:SmokeMe.Infra.SmokeTestsSessionReportDto"/> corresponding to the external exposition model of the provided <see cref="T:SmokeMe.SmokeTestsSessionReport"/> instance.</returns>
        </member>
        <member name="T:SmokeMe.Infra.SmokeTestsSessionReportDto">
            <summary>
            Exposition model of a smoke test session execution.
            Contains extra data about the technical execution context too (e.g.: the instance identifier of the API, its number of cores).
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.IsSuccess">
            <summary>
            Returns <b>true</b> if the Smoke test session is succeeded (i.e. all smoke test succeeded), <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.Status">
            <summary>
            Gets the status of the smoke tests session report.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.RequestedCategories">
            <summary>
            Gets the list of the requested Smoke test categories.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.Results">
            <summary>
            Gets all the <see cref="T:SmokeMe.SmokeTestResultWithMetaData"/> results of this Smoke test session.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.InstanceIdentifier">
            <summary>
            Gets the API instance identifier.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.ApiVersion">
            <summary>
            Gets the API version.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.OsName">
            <summary>
            Gets the OS name of this API instance.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.AzureRegionName">
            <summary>
            Gets the Azure region name where this API instance is running.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.NbOfProcessors">
            <summary>
            Gets the number of Processors this API instance has.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.GlobalTimeout">
            <summary>
            Gets the global timeout for the execution of all smoke tests.
            </summary>
        </member>
        <member name="P:SmokeMe.Infra.SmokeTestsSessionReportDto.GlobalTimeoutInMSec">
            <summary>
            Gets the global timeout for the execution of all smoke tests (in msec).
            </summary>
        </member>
        <member name="M:SmokeMe.Infra.SmokeTestsSessionReportDto.#ctor(SmokeMe.SmokeTestsSessionReport,SmokeMe.Infra.ApiRuntimeDescription,System.Collections.Generic.IEnumerable{SmokeMe.Infra.SmokeTestResultWithMetaDataDto},System.String[],System.TimeSpan)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.Infra.SmokeTestsSessionReportDto"/>.
            </summary>
            <param name="reports">The <see cref="T:SmokeMe.SmokeTestsSessionReport"/> to be adapted.</param>
            <param name="apiRuntimeDescription">The <see cref="T:SmokeMe.Infra.ApiRuntimeDescription"/> associated to that smoke test execution.</param>
            <param name="smokeTestResultWithMetaDataDtos">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all the smoke tests results.</param>
            <param name="categories"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:SmokeMe.Infra.SmokeTestsSessionReportDto.#ctor(SmokeMe.Infra.ApiRuntimeDescription,System.TimeSpan,System.String)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.Infra.SmokeTestsSessionReportDto"/>.
            </summary>
            <param name="apiRuntimeDescription">The <see cref="T:SmokeMe.Infra.ApiRuntimeDescription"/> associated to that smoke test execution.</param>
            <param name="runtimeDescription"></param>
        </member>
        <member name="T:SmokeMe.IProcessSmokeTests">
            <summary>
            Responsible to run all found smoke tests.
            </summary>
        </member>
        <member name="M:SmokeMe.IProcessSmokeTests.Process(System.String[])">
            <summary>
            Run all the instantiated <see cref="T:SmokeMe.SmokeTest"/> instances that have been found in the running code.
            </summary>
            <returns>A collection of <see cref="T:SmokeMe.SmokeTest"/> instances.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTest">
            <summary>
            Smoke test/scenario/code to be executed in order to check that a minimum
            viable capability of your system is working.
            
            Note: all the services and dependencies you need for it will be automatically
            injected by the SmokeMe framework via the ASP.NET IServiceProvider of your API
            (classical constructor-based injection). Can't be that easy, right? ;-)
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTest.SmokeTestName">
            <summary>
            Name of the smoke test scenario.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTest.Description">
            <summary>
            Description of the smoke test scenario.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTest.Scenario">
            <summary>
            The code of this smoke test scenario.
            </summary>
            <returns>The <see cref="T:SmokeMe.SmokeTestResult"/> of this Smoke test.</returns>
        </member>
        <member name="M:SmokeMe.SmokeTest.HasToBeDiscarded">
            <summary>
            Returns a value indicating whether or not this smoke test must be discarded (may be interesting to coupled with feature toggle mechanism).
            </summary>
        </member>
        <member name="T:SmokeMe.SmokeTestAutoFinder">
            <summary>
            Responsible to find and instantiate smoke tests to be run within an executable.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestAutoFinder.#ctor(System.IServiceProvider)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestAutoFinder"/>
            </summary>
            <param name="serviceProvider">The (IoC) <see cref="T:System.IServiceProvider"/> instance needed to instantiate <see cref="T:SmokeMe.SmokeTest"/> instances.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestAutoFinder.FindAllSmokeTestsToRun(System.String[])">
            <summary>
            Finds all smoke tests scenarii that have to be executed for this API.
            </summary>
            <param name="requestedCategories">Categories requested by the client.</param>
            <returns>The collection of all <see cref="T:SmokeMe.SmokeTest"/> instance declared in this API to be executed.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTestProcessor">
            <summary>
            Responsible to run all found smoke tests to retrieve the accurate http status code
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestProcessor.#ctor(Microsoft.Extensions.Configuration.IConfiguration,System.IServiceProvider,SmokeMe.IFindSmokeTests)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestProcessor"/>
            </summary>
            <param name="configuration">The configuration of the API.</param>
            <param name="serviceProvider">A Service provider to be used to instantiate a <see cref="T:SmokeMe.IFindSmokeTests"/> instance if not provided.</param>
            <param name="smokeTestProvider">(optional) A smoke test provider (used for unit testing purpose).</param>
        </member>
        <member name="M:SmokeMe.SmokeTestProcessor.Process(System.String[])">
            <summary>
            
            </summary>
            <param name="categories"></param>
            <returns></returns>
        </member>
        <member name="T:SmokeMe.SmokeTestResult">
            <summary>
            Result of a <see cref="T:SmokeMe.SmokeTest"/> execution.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResult.Outcome">
            <summary>
            Indicates whether the outcome of this <see cref="T:SmokeMe.SmokeTest"/> execution is positive or not.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResult.ErrorMessage">
            <summary>
            Gets the <see cref="T:SmokeMe.Error"/> associated to this <see cref="T:SmokeMe.SmokeTest"/> execution.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestResult.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestResult"/>.
            </summary>
            <param name="errorMessage">The error message associated to the smoke test execution.</param>
            <param name="exception">The <see cref="T:System.Exception"/> associated to the smoke test execution.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestResult.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestResult"/>.
            </summary>
            <param name="outcome">The outcome of this <see cref="T:SmokeMe.SmokeTest"/> execution.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestResult.ToString">
            <summary>
            Returns a string representing the object.
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTestResultWithMetaData">
            <summary>
            Result of a <see cref="T:SmokeMe.SmokeTest"/> execution enhanced with meta data about it and its execution (like the <see cref="P:SmokeMe.SmokeTestResultWithMetaData.Duration"/>).
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.Outcome">
            <summary>
            Indicates whether the outcome of this <see cref="T:SmokeMe.SmokeTest"/> execution is positive or not.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.ErrorMessage">
            <summary>
            Gets the <see cref="T:SmokeMe.Error"/> associated to this <see cref="T:SmokeMe.SmokeTest"/> execution.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.Duration">
            <summary>
            Gets the duration of this <see cref="T:SmokeMe.SmokeTest"/> execution.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.SmokeTestName">
            <summary>
            Gets the name of the executed <see cref="T:SmokeMe.SmokeTest"/> instance.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestResultWithMetaData.SmokeTestDescription">
            <summary>
            Gets the description of the executed <see cref="T:SmokeMe.SmokeTest"/> instance.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestResultWithMetaData.#ctor(SmokeMe.SmokeTestResult,System.Nullable{System.TimeSpan},System.String,System.String,System.String[],System.Nullable{System.Boolean},System.String,System.Nullable{SmokeMe.Status})">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestResultWithMetaData"/>.
            </summary>
            <param name="smokeTestResult">The <see cref="P:SmokeMe.SmokeTestResultWithMetaData.SmokeTestResult"/> associated with this <see cref="T:SmokeMe.SmokeTest"/> execution.</param>
            <param name="duration">The duration of this <see cref="T:SmokeMe.SmokeTest"/> execution.</param>
            <param name="smokeTestName">Name of the smoke test.</param>
            <param name="smokeTestDescription">Description of the smoke test.</param>
            <param name="smokeTestCategories"></param>
            <param name="discarded"></param>
            <param name="smokeTestType"></param>
            <param name="status"></param>
        </member>
        <member name="M:SmokeMe.SmokeTestResultWithMetaData.ToString">
            <summary>
            Returns a string representing the object.
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTestRunner">
            <summary>
            Runner for <see cref="T:SmokeMe.SmokeTest"/> instances.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestRunner.ExecuteAllSmokeTestsInParallel(SmokeMe.SmokeTestInstanceWithMetaData[],System.TimeSpan)">
            <summary>
            Executes <see cref="T:SmokeMe.SmokeTest"/> instances that has been found for this API.
            </summary>
            <param name="smokeTestsWithMetaData">The <see cref="T:SmokeMe.SmokeTestInstanceWithMetaData"/> instances to be executed in parallel.</param>
            <param name="globalTimeout">The maximum amount of time allowed for all <see cref="T:SmokeMe.SmokeTest"/> instances to be executed.</param>
            <returns>The <see cref="T:SmokeMe.SmokeTestsSessionReport"/>.</returns>
        </member>
        <member name="T:SmokeMe.SmokeTestsSessionReport">
            <summary>
            Result of a smoke test session.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestsSessionReport.Results">
            <summary>
            Gets all the <see cref="T:SmokeMe.SmokeTestResultWithMetaData"/> results of this Smoke test session.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestsSessionReport.IsSuccess">
            <summary>
            Returns <b>true</b> if the Smoke test session is succeeded (i.e. all smoke test succeeded), <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:SmokeMe.SmokeTestsSessionReport.Status">
            <summary>
            Gets the status of the smoke tests session report.
            </summary>
        </member>
        <member name="M:SmokeMe.SmokeTestsSessionReport.#ctor(SmokeMe.SmokeTestResultWithMetaData[],System.Nullable{System.Boolean},System.String)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestsSessionReport"/>.
            </summary>
            <param name="results">The results of this Smoke test session.</param>
            <param name="isSuccess">Whether or not the <see cref="T:SmokeMe.SmokeTestsSessionReport"/> is successful or not.</param>
            <param name="status">The status of the report.</param>
        </member>
        <member name="M:SmokeMe.SmokeTestsSessionReport.#ctor(System.String)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.SmokeTestsSessionReport"/>.
            </summary>
            <param name="status">The status of the report.</param>
        </member>
        <member name="T:SmokeMe.TimeoutSmokeTestsSessionReport">
            <summary>
            Represents a failed (due to timeout) smoke test session.
            </summary>
        </member>
        <member name="M:SmokeMe.TimeoutSmokeTestsSessionReport.#ctor(System.TimeSpan,SmokeMe.SmokeTestResultWithMetaData[],System.String)">
            <summary>
            Instantiates a <see cref="T:SmokeMe.TimeoutSmokeTestsSessionReport"/>.
            </summary>
            <param name="globalTimeout">The global timeout expiration that led to his failure.</param>
            <param name="completedResults">The results we could get before the smoke test execution session timeouts.</param>
            <param name="status">The status of the report.</param>
        </member>
    </members>
</doc>
